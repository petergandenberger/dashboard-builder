{"version":3,"file":"gridstack-engine.js","sourceRoot":"","sources":["../src/gridstack-engine.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * gridstack-engine.ts 4.2.3\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { Utils } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n/** options used for creations - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: onChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onChange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal true if we have some items locked */\r\n  private _hasLocked: boolean;\r\n  /** @internal unique global internal _id counter NOT starting at 0 */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.onChange = opts.onChange;\r\n    this._float = opts.float;\r\n    this.maxRow = opts.maxRow;\r\n    this.nodes = opts.nodes || [];\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    this.saveInitial(); // since begin update (which is called multiple times) won't do this\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    return this._packNodes()\r\n      ._notify();\r\n  }\r\n\r\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n  private _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\r\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n  }\r\n\r\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n   * return true if we moved. */\r\n  private _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\r\n    this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n\r\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n    if (!collide) return false;\r\n\r\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n    if (node._moving && !opt.nested && !this.float) {\r\n      if (this.swap(node, collide)) return true;\r\n    }\r\n\r\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n    let area = nn;\r\n    if (this._useEntireRowArea(node, nn)) {\r\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n      collide = this.collide(node, area, opt.skip); // force new hit\r\n    }\r\n\r\n    let didMove = false;\r\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\r\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n      let moved: boolean;\r\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n      // but remember that skip down so we only do this once (and push others otherwise).\r\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n        // can take space we had, or before where we're going\r\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\r\n        node._skipDown = (node._skipDown || nn.y > node.y);\r\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\r\n        if (collide.locked && moved) {\r\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n        } else if (!collide.locked && moved && opt.pack) {\r\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n          this._packNodes();\r\n          nn.y = collide.y + collide.h;\r\n          Utils.copyPos(node, nn);\r\n        }\r\n        didMove = didMove || moved;\r\n      } else {\r\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\r\n      }\r\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n      collide = undefined;\r\n    }\r\n    return didMove;\r\n  }\r\n\r\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\r\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\r\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n\r\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\r\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\r\n    if (!o.rect || !node._rect) return;\r\n    let r0 = node._rect; // where started\r\n    let r = {...o.rect}; // where we are\r\n\r\n    // update dragged rect to show where it's coming from (above or below, etc...)\r\n    if (r.y > r0.y) {\r\n      r.h += r.y - r0.y;\r\n      r.y = r0.y;\r\n    } else {\r\n      r.h += r0.y - r.y;\r\n    }\r\n    if (r.x > r0.x) {\r\n      r.w += r.x - r0.x;\r\n      r.x = r0.x;\r\n    } else {\r\n      r.w += r0.x - r.x;\r\n    }\r\n\r\n    let collide: GridStackNode;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let r2 = n._rect; // overlapping target\r\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n      // depending on which side we started from, compute the overlap % of coverage\r\n      // (ex: from above/below we only compute the max horizontal line coverage)\r\n      if (r0.y < r2.y) { // from above\r\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\r\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n      }\r\n      if (r0.x < r2.x) { // from the left\r\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\r\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n      }\r\n      let over = Math.min(xOver, yOver);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    return collide;\r\n  }\r\n\r\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\r\n  {\r\n    this.nodes.forEach(n =>\r\n      n._rect = {\r\n        y: n.y * h + top,\r\n        x: n.x * w + left,\r\n        w: n.w * w - left - right,\r\n        h: n.h * h - top - bottom\r\n      }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\r\n    if (!b || b.locked || !a || a.locked) return false;\r\n\r\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\r\n      let x = b.x, y = b.y;\r\n      b.x = a.x; b.y = a.y; // b -> a position\r\n      if (a.h != b.h) {\r\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\r\n      } else {\r\n        a.x = x; a.y = y; // a -> old b position\r\n      }\r\n      a._dirty = b._dirty = true;\r\n      return true;\r\n    }\r\n    let touching: boolean; // remember if we called it (vs undefined)\r\n\r\n    // same size and same row or column, and touching\r\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\r\n      return _doSwap();\r\n    if (touching === false) return; // ran test and fail, bail out\r\n\r\n    // check for taking same columns (but different height) and touching\r\n    if (a.w === b.w && a.x === b.x && (touching || Utils.isTouching(a, b))) {\r\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\r\n      return _doSwap();\r\n    }\r\n\r\n    /* different X will be weird (expect vertical swap) and different height overlap, so too complex. user regular layout instead\r\n    // else check if swapping would not collide with anything else (requiring a re-layout)\r\n    if (!this.collide(a, {x: a.x, y: a.y, w: b.w, h: b.h}, b) &&\r\n        !this.collide(a, {x: b.x, y: b.y, w: a.w, h: a.h}, b))\r\n      return _doSwap(); */\r\n    return false;\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    return !this.collide(nn);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) return this;\r\n    this.batchUpdate()\r\n      ._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // will force attr update\r\n    });\r\n    return this.commit();\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) return;\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes()._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes(); // first to last\r\n\r\n    if (this.float) {\r\n      // restore original Y pos\r\n      this.nodes.forEach(n => {\r\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\r\n        let newY = n.y;\r\n        while (newY > n._orig.y) {\r\n          --newY;\r\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!collide) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // top gravity pack\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) return;\r\n        while (n.y > 0) {\r\n          let newY = i === 0 ? 0 : n.y - 1;\r\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!canBeMoved) break;\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    return this.nodeBoundFix(node, resizing);\r\n  }\r\n\r\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\r\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      // if user loaded a larger than allowed widget for current # of columns,\r\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\r\n      if (this.column < 12) {\r\n        node.w = Math.min(12, node.w);\r\n        this.cacheOneLayout(node, 12);\r\n      }\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original x,y,w,h instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\r\n    }\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal call this to call onChange CB with dirty nodes */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    this.onChange && this.onChange(dirtyNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  /** @internal remove dirty and last tried info */\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.nodes.forEach(n => {\r\n      delete n._dirty;\r\n      delete n._lastTried;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size to track real dirty state.\r\n   * Note: should be called right after we call change event (so next API is can detect changes)\r\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._orig = Utils.copyPos({}, n);\r\n      delete n._dirty;\r\n    });\r\n    this._hasLocked = this.nodes.some(n => n.locked);\r\n    return this;\r\n  }\r\n\r\n  /** @internal restore all the nodes back to initial values (called when we leave) */\r\n  public restoreInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      if (Utils.samePos(n, n._orig)) return;\r\n      Utils.copyPos(n, n._orig);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** call to add the given node to our list, fixing collision and re-packing */\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    let dup: GridStackNode;\r\n    if (dup = this.nodes.find(n => n._id === node._id)) return dup; // prevent inserting twice! return it instead.\r\n\r\n    node = this.prepareNode(node);\r\n    delete node._temporaryRemoved;\r\n    delete node._removeDOM;\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    triggerAddEvent && this.addedNodes.push(node);\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes()\r\n      ._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (!this.nodes.find(n => n === node)) {\r\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\r\n      return this;\r\n    }\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    return this._packNodes()\r\n      ._notify(node);\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) return this;\r\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    return this._notify(this.removedNodes);\r\n  }\r\n\r\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n   * others in a clone first, then apply those changes if still within specs. */\r\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (node.locked) return false;\r\n    if (!this.changedPosConstrain(node, o)) return false;\r\n    o.pack = true;\r\n\r\n    // simpler case: move item directly...\r\n    if (!this.maxRow/* && !this._hasLocked*/) {\r\n      return this.moveNode(node, o);\r\n    }\r\n\r\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n    if (!clonedNode) return false;\r\n\r\n    let canMove = clone.moveNode(clonedNode, o);\r\n    // if maxRow make sure we are still valid size\r\n    if (this.maxRow && canMove) {\r\n      canMove = (clone.getRow() <= this.maxRow);\r\n      // turns out we can't grow, then see if we can swap instead (ex: full grid)\r\n      if (!canMove) {\r\n        let collide = this.collide(node, o);\r\n        if (collide && this.swap(node, collide)) {\r\n          this._notify();\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    if (!canMove) return false;\r\n\r\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\r\n    clone.nodes.filter(n => n._dirty).forEach(c => {\r\n      let n = this.nodes.find(a => a._id === c._id);\r\n      if (!n) return;\r\n      Utils.copyPos(n, c);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return true;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    delete node._willFitPos;\r\n    if (!this.maxRow) return true;\r\n    // create a clone with NO maxRow and check if still within size\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\r\n    this.cleanupNode(n);\r\n    delete n.el; delete n._id; delete n.content; delete n.grid;\r\n    clone.addNode(n);\r\n    if (clone.getRow() <= this.maxRow) {\r\n      node._willFitPos = Utils.copyPos({}, n);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** true if x,y or w,h are different after clamping to min/max */\r\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\r\n    // make sure w,h are set\r\n    p.w = p.w || node.w;\r\n    p.h = p.h || node.h;\r\n    if (node.x !== p.x || node.y !== p.y) return true;\r\n    // check constrained w,h\r\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\r\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\r\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\r\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\r\n    return (node.w !== p.w || node.h !== p.h);\r\n  }\r\n\r\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (!node || node.locked || !o) return false;\r\n    if (o.pack === undefined) o.pack = true;\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    if (typeof o.x !== 'number') { o.x = node.x; }\r\n    if (typeof o.y !== 'number') { o.y = node.y; }\r\n    if (typeof o.w !== 'number') { o.w = node.w; }\r\n    if (typeof o.h !== 'number') { o.h = node.h; }\r\n    let resizing = (node.w !== o.w || node.h !== o.h);\r\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\r\n    Utils.copyPos(nn, o);\r\n    nn = this.nodeBoundFix(nn, resizing);\r\n    Utils.copyPos(o, nn);\r\n\r\n    if (Utils.samePos(node, o)) return false;\r\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\r\n\r\n    // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\r\n    let area = nn;\r\n    // if (this._useEntireRowArea(node, nn)) {\r\n    //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n    // }\r\n\r\n    // check if we will need to fix collision at our new location\r\n    let collides = this.collideAll(node, area, o.skip);\r\n    let needToMove = true;\r\n    if (collides.length) {\r\n      // now check to make sure we actually collided over 50% surface area while dragging\r\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\r\n      if (collide) {\r\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n      } else {\r\n        needToMove = false; // we didn't cover >50% for a move, skip...\r\n      }\r\n    }\r\n\r\n    // now move (to the original ask vs the collision version which might differ) and repack things\r\n    if (needToMove) {\r\n      node._dirty = true;\r\n      Utils.copyPos(node, nn);\r\n    }\r\n    if (o.pack) {\r\n      this._packNodes()\r\n        ._notify();\r\n    }\r\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (!node._updating) {\r\n      node._updating = true;\r\n      delete node._skipDown;\r\n      if (!this.batchMode) this.saveInitial();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      delete n._skipDown;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    this._sortNodes();\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          if (!node._orig) return; // didn't change (newly added ?)\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._orig.y) {\r\n            n.y += (node.y - node._orig.y);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._orig.x) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._orig.w) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) return this;\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n   * @param node single node to cache\r\n   * @param column corresponding column index to save it under\r\n   */\r\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\r\n    n._id = n._id || GridStackEngine._idSeq++;\r\n    let layout: Layout = {x: n.x, y: n.y, w: n.w, _id: n._id}\r\n    this._layouts = this._layouts || [];\r\n    this._layouts[column] = this._layouts[column] || [];\r\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\r\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values but the _id */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n"]}